name: Build CMake project

defaults:
  run:
    shell: pwsh

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

env:
  DOTNET_BUILD_EXTRA_ARGS: ""

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # TODO: USE PRESETS!!!
        configuration: [ "Debug", "Release" ]
        os: [ "windows-latest", "ubuntu-latest" ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install Linux dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          packages: dos2unix
          version: 1.0

      - name: Run dos2unix
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          find . -type f -name "*.txt" -print0 | xargs -0 dos2unix
          find . -type f -name "*.sh" -print0 | xargs -0 dos2unix
          find . -type f -name "*.json" -print0 | xargs -0 dos2unix
          find . -type f -name "*.yml" -print0 | xargs -0 dos2unix
          find . -type f -name "*.yaml" -print0 | xargs -0 dos2unix
          find . -type f -name "*.liquid" -print0 | xargs -0 dos2unix
          find . -type f -name "*.props" -print0 | xargs -0 dos2unix
          find . -type f -name "*.cs" -print0 | xargs -0 dos2unix
          find . -type f -name "*.c" -print0 | xargs -0 dos2unix
          find . -type f -name "*.h" -print0 | xargs -0 dos2unix
          find . -type f -name "*.cpp" -print0 | xargs -0 dos2unix
          find . -type f -name "*.hpp" -print0 | xargs -0 dos2unix
          find . -type f -name "*.csproj" -print0 | xargs -0 dos2unix
          find . -type f -name "*.cmake" -print0 | xargs -0 dos2unix

      - name: Setup dotnet
        uses: actions/setup-dotnet@v5
        with:
          cache: true
          cache-dependency-path: "UAssetAPI-DNNE/packages.lock.json"

      - name: Display dotnet version
        run: dotnet --version

      - run: dotnet restore

      - name: Setup MSVC dev env
        uses: ilammy/msvc-dev-cmd@v1

      # TODO: remove later. Stupid workaround.
      #   For whatever fucking reason, the Copy task in UAssetAPI-DNNE.csproj
      #   fails to find the source file on Linux GH Actions runners, even though
      #   it exists. So copy it manually here.
      - name: Linux workarounds
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          SHIT_WORKAROUND_DIR: "${{ github.workspace }}/UAssetAPI-DNNE/build/generated/uassetapi_dnne/"
        run: |
          find ~ -type f -name "*platform.c" 2>/dev/null || true
          find ~ -type f -name "*platform.c" -print0 2>/dev/null | xargs -0 ls -li || true
          mkdir -p ${{ env.SHIT_WORKAROUND_DIR }}
          find ~ -type f -name "*platform.c" -exec cp --target-directory="${{ env.SHIT_WORKAROUND_DIR }}" {} \+

      # TODO: maybe this is a bit lazy?
      - name: Install latest CMake
        run: pip install --upgrade cmake

      - run: cmake --version

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build
          -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}
          -DUASSETAPI_DNNE_DOTNET_BUILD_EXTRA_ARGS=${{ env.DOTNET_BUILD_EXTRA_ARGS }}

      # TODO: remove later.
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          find ~ -type f -executable -name "*platform.c" 2>/dev/null || true

      - run: |
          dotnet nuget locals all --list --force-english-output
          dotnet list package --include-transitive

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{ matrix.configuration }}

      # TODO: remove later.
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          find ~ -type f -executable -name "*platform.c" 2>/dev/null || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: UAssetAPI-DNNE-cmake-build-${{ matrix.os }}-${{ matrix.configuration }}
          path: ${{github.workspace}}/build
