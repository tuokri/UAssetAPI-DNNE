<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <RootNamespace>UAssetAPI_DNNE</RootNamespace>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <Authors>Tuomo Kriikkula</Authors>
        <Title>UAssetAPI-DNNE</Title>
        <Description>UAssetAPI foreign function interface using DNNE.</Description>
        <PackageProjectUrl>https://github.com/tuokri/UAssetAPI-DNNE</PackageProjectUrl>
        <Copyright>Copyright © Tuomo Kriikkula 2025</Copyright>
        <RuntimeIdentifiers>win-x64;linux-x64</RuntimeIdentifiers>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <FileVersion>1.0.0.0</FileVersion>
        <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>

        <DnneBuildExports>true</DnneBuildExports>
        <EnableDynamicLoading>true</EnableDynamicLoading>
        <DnneNativeBinaryName>uassetapi_dnne</DnneNativeBinaryName>
        <DnneAddGeneratedBinaryToProject>false</DnneAddGeneratedBinaryToProject>
        <DnneMSBuildLogging>high</DnneMSBuildLogging>
    </PropertyGroup>

    <!-- NOTE: RDIPartCodeGenBin is used to call the right CodeGen binary,
         depending on the build machine OS. -->

    <!-- Build machine OS is Windows. -->
    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' And '$(ForcedRuntimeIdentifier)' == '' ">
        <!--suppress CheckTagEmptyBody -->
        <RDIPartCodeGenBin>/</RDIPartCodeGenBin>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' And '$(ForcedRuntimeIdentifier)' != '' ">
        <RDIPartCodeGenBin>win-x64/</RDIPartCodeGenBin>
    </PropertyGroup>

    <!-- Build machine OS is Linux. -->
    <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' And '$(ForcedRuntimeIdentifier)' == '' ">
        <!--suppress CheckTagEmptyBody -->
        <RDIPartCodeGenBin>/</RDIPartCodeGenBin>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' And '$(ForcedRuntimeIdentifier)' != '' ">
        <RDIPartCodeGenBin>linux-x64/</RDIPartCodeGenBin>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
        <CodeGenBin>UAssetAPI-DNNE.CodeGen.exe</CodeGenBin>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' ">
        <CodeGenBin>UAssetAPI-DNNE.CodeGen</CodeGenBin>
    </PropertyGroup>

    <!-- Build machine OS is Windows. -->
    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' And '$(ForcedRuntimeIdentifier)' == '' ">
        <!--suppress CheckTagEmptyBody -->
        <RDIPartCodeGenBin>/</RDIPartCodeGenBin>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' And '$(ForcedRuntimeIdentifier)' != '' ">
        <RDIPartCodeGenBin>win-x64/</RDIPartCodeGenBin>
    </PropertyGroup>

    <!-- Build machine OS is Linux. -->
    <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' And '$(ForcedRuntimeIdentifier)' == '' ">
        <!--suppress CheckTagEmptyBody -->
        <RDIPartCodeGenBin></RDIPartCodeGenBin>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' And '$(ForcedRuntimeIdentifier)' != '' ">
        <RDIPartCodeGenBin>linux-x64/</RDIPartCodeGenBin>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(ForcedRuntimeIdentifier)' == '' ">
        <RDIPart>/</RDIPart>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(ForcedRuntimeIdentifier)' != '' ">
        <RDIPart>/$(ForcedRuntimeIdentifier)/</RDIPart>
    </PropertyGroup>

    <!-- TODO: why the fuck is $(ProjectName) empty here? -->
    <PropertyGroup Condition=" '$(CMakeOutDir)' == '' ">
        <OutFuckingDir>$(SolutionDir)UAssetAPI-DNNE/bin/$(Configuration)/$(TargetFramework)$(RDIPart)</OutFuckingDir>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(CMakeOutDir)' != '' ">
        <OutFuckingDir>$(CMakeOutDir)/</OutFuckingDir>
    </PropertyGroup>
    <PropertyGroup>
        <CodeGenDir>$(OutFuckingDir)$(DnneNativeBinaryName)/</CodeGenDir>
    </PropertyGroup>

    <PropertyGroup>
        <!-- TODO: $(MyOutDir) is empty here for whatever fucking reason. -->
        <DnneAdditionalIncludeDirectories>$(MSBuildProjectDirectory)/src/c;$(OutFuckingDir);$(OutDir)</DnneAdditionalIncludeDirectories>
    </PropertyGroup>

    <Target Name="WriteDnneNetHostDirToFile"
            Condition="'${CMakeOutDir}' != ''"
            AfterTargets="DnneGenerateNativeExports"
            Outputs="$(OutFuckingDir)DnneNetHostDir.txt"
    >
        <!-- This mirrors DNNE's $(DnneNetHostDir). -->
        <PropertyGroup>
            <_DnneNetHostDir>$(NetCoreTargetingPackRoot)/Microsoft.NETCore.App.Host.$(DnneRuntimeIdentifier)/$(BundledNETCoreAppPackageVersion)/runtimes/$(DnneRuntimeIdentifier)/native</_DnneNetHostDir>
        </PropertyGroup>
        <Message Text="_DnneNetHostDir='$(_DnneNetHostDir)'"/>
        <WriteLinesToFile
                File="$(OutFuckingDir)DnneNetHostDir.txt"
                Lines="$([MSBuild]::NormalizePath($(_DnneNetHostDir)))"
                Overwrite="true"
        />
    </Target>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\submodules\UAssetAPI\UAssetAPI\UAssetAPI.csproj"/>
        <ProjectReference Include="..\UAssetAPI-DNNE.CodeGen\UAssetAPI-DNNE.CodeGen.csproj">
            <Private>False</Private>
            <CopyLocalSatelliteAssemblies>False</CopyLocalSatelliteAssemblies>
            <ReferenceOutputAssembly>False</ReferenceOutputAssembly>
        </ProjectReference>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DNNE" Version="2.0.7"/>
    </ItemGroup>

    <Target
            Name="CopyDnnePlatformSourceToOutDir"
            BeforeTargets="BeforeBuild"
            Condition="$(EmitDnnePlatformSourceToOutDir)"
            Outputs="$(CodeGenDir)platform.c"
    >
        <XmlPeek
                XmlInputPath="$(MSBuildProjectFullPath)"
                Query="//PackageReference[@Include='DNNE']/@Version">
            <Output TaskParameter="Result" PropertyName="DNNEVersion"/>
        </XmlPeek>

        <PropertyGroup>
            <DnnePlatformSource>$(NuGetPackageRoot)DNNE/$(DNNEVersion)/tools/platform/platform.c</DnnePlatformSource>
        </PropertyGroup>

        <Message Text="Copy: '$(DnnePlatformSource)' -> '$(CodeGenDir)'" Importance="high"/>
        <Copy
                SourceFiles="$(DnnePlatformSource)"
                DestinationFolder="$(CodeGenDir)"
        />
    </Target>

    <Target Name="CleanDnnePlatformSource"
            BeforeTargets="CoreClean">
        <Delete Files="$(CodeGenDir)platform.c"/>
    </Target>

    <ItemGroup>
        <Folder Include="src\c\"/>
    </ItemGroup>

    <PropertyGroup>
        <EngineVersionHeaderFile>$(CodeGenDir)engineversion.h</EngineVersionHeaderFile>
    </PropertyGroup>

    <Target Name="MoveGeneratedHeader"
            AfterTargets="DnneCopyGeneratedHeaders"
            Inputs="$(OutDir)$(DnneNativeBinaryName).h"
            Outputs="$(CodeGenDir)$(DnneNativeBinaryName).h"
    >
        <Message Text="Move: '$(OutDir)$(DnneNativeBinaryName).h' -> '$(CodeGenDir)$(DnneNativeBinaryName).h'"
                 Importance="high"/>
        <Move SourceFiles="$(OutDir)$(DnneNativeBinaryName).h"
              DestinationFiles="$(CodeGenDir)$(DnneNativeBinaryName).h"
        />
    </Target>

    <Target Name="CleanMovedGeneratedHeader"
            BeforeTargets="CoreClean">
        <Delete Files="$(CodeGenDir)$(DnneNativeBinaryName).h"/>
    </Target>

    <Target Name="MoveDnneHeader"
            AfterTargets="DnneCopyGeneratedHeaders"
            Inputs="$(OutDir)dnne.h"
            Outputs="$(CodeGenDir)dnne.h"
    >
        <Message Text="Move: '$(OutDir)dnne.h' -> '$(CodeGenDir)dnne.h'" Importance="high"/>
        <Move SourceFiles="$(OutDir)dnne.h"
              DestinationFiles="$(CodeGenDir)dnne.h"
        />
    </Target>

    <Target Name="CleanMovedDnneHeader"
            BeforeTargets="CoreClean">
        <Delete Files="$(CodeGenDir)dnne.h"/>
    </Target>

    <Target Name="GenerateEngineVersionHeader"
            AfterTargets="CoreCompile"
            BeforeTargets="DnneBuildNativeExports"
            Inputs="$(ProjectDir)src/templates/EngineVersion.liquid"
            Outputs="$(EngineVersionHeaderFile)">

        <Message Text="Generating '$(EngineVersionHeaderFile)'" Importance="high"/>
        <MakeDir Directories="$(CodeGenDir)"/>

        <!-- NOTE: hack for non-solution builds! -->
        <PropertyGroup Condition=" '$(SolutionDir)' == '' Or '$(SolutionDir)' == '*Undefined*' ">
            <CodeGenBinDir>$(OutDir)</CodeGenBinDir>
        </PropertyGroup>
        <PropertyGroup Condition=" '$(CodeGenBinDir)' == '' ">
            <CodeGenBinDir>$(SolutionDir)UAssetAPI-DNNE.CodeGen/bin/$(Configuration)/$(TargetFramework)/$(RDIPartCodeGenBin)</CodeGenBinDir>
        </PropertyGroup>

        <!-- TODO: there has to be a cleaner and more robust way of doing this? -->
        <!-- TODO: this breaks if UAssetAPI-DNNE.CodeGen and UAssetAPI-DNNE target frameworks differ? -->
        <PropertyGroup>
            <!-- NOTE: Run the code generator appropriate for the **BUILD MACHINE'S OS** -->
            <CodeGenCmd>$(CodeGenBinDir)$(CodeGenBin)</CodeGenCmd>
        </PropertyGroup>

        <PropertyGroup>
            <EngineVersionTemplateFile>$(ProjectDir)src/templates/EngineVersion.liquid</EngineVersionTemplateFile>
        </PropertyGroup>

        <Exec Command="$(CodeGenCmd) --input=&quot;$(EngineVersionTemplateFile)&quot; --output=&quot;$(EngineVersionHeaderFile)&quot; --render-action=EngineVersion"/>
    </Target>

    <Target Name="CleanEngineVersionHeader"
            BeforeTargets="CoreClean">
        <Delete Files="$(EngineVersionHeaderFile)"/>
    </Target>

</Project>
