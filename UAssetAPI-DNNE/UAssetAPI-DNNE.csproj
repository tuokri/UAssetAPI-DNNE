<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <RootNamespace>UAssetAPI_DNNE</RootNamespace>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <Authors>Tuomo Kriikkula</Authors>

        <DnneBuildExports>true</DnneBuildExports>
        <EnableDynamicLoading>true</EnableDynamicLoading>
        <DnneNativeBinaryName>uassetapi_dnne</DnneNativeBinaryName>
        <DnneAddGeneratedBinaryToProject>true</DnneAddGeneratedBinaryToProject>
        <DnneMSBuildLogging>high</DnneMSBuildLogging>
        <DnneAdditionalIncludeDirectories>
            "$(MSBuildProjectDirectory)/src/c/"
        </DnneAdditionalIncludeDirectories>
        <Title>UAssetAPI-DNNE</Title>
        <Description>UAssetAPI foreign function interface using DNNE.</Description>
        <PackageProjectUrl>https://github.com/tuokri/UAssetAPI-DNNE</PackageProjectUrl>
        <Copyright>Copyright © Tuomo Kriikkula 2025</Copyright>
        <RuntimeIdentifiers>win-x64;linux-x64</RuntimeIdentifiers>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <FileVersion>1.0.0.0</FileVersion>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\submodules\UAssetAPI\UAssetAPI\UAssetAPI.csproj"/>
        <ProjectReference Include="..\UAssetAPI-DNNE.CodeGen\UAssetAPI-DNNE.CodeGen.csproj">
            <Private>False</Private>
            <CopyLocalSatelliteAssemblies>False</CopyLocalSatelliteAssemblies>
            <ReferenceOutputAssembly>False</ReferenceOutputAssembly>
        </ProjectReference>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DNNE" Version="2.0.7"/>
    </ItemGroup>

    <ItemGroup>
        <Folder Include="src\c\"/>
    </ItemGroup>

    <Target Name="GenerateEngineVersionHeader"
            AfterTargets="CoreCompile"
            BeforeTargets="DnneBuildNativeExports"
            Inputs="$(ProjectDir)src/templates/EngineVersion.liquid"
            Outputs="$(OutDir)engineversion.h">

        <Message Text="Generating '$(OutDir)engineversion.h'" Importance="high"/>
        <MakeDir Directories="$(OutDir)"/>

        <!-- Build machine OS is Windows. -->
        <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' And '$(ForcedRuntimeIdentifier)' == '' ">
            <!--suppress CheckTagEmptyBody -->
            <RDIPart></RDIPart>
        </PropertyGroup>
        <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' And '$(ForcedRuntimeIdentifier)' != '' ">
            <RDIPart>win-x64/</RDIPart>
        </PropertyGroup>

        <!-- Build machine OS is Linux. -->
        <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' And '$(ForcedRuntimeIdentifier)' == '' ">
            <!--suppress CheckTagEmptyBody -->
            <RDIPart></RDIPart>
        </PropertyGroup>
        <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' And '$(ForcedRuntimeIdentifier)' != '' ">
            <RDIPart>linux-x64/</RDIPart>
        </PropertyGroup>

        <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
            <CodeGenBin>UAssetAPI-DNNE.CodeGen.exe</CodeGenBin>
        </PropertyGroup>
        <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' ">
            <CodeGenBin>UAssetAPI-DNNE.CodeGen</CodeGenBin>
        </PropertyGroup>

        <!-- TODO: there has to be a cleaner and more robust way of doing this? -->
        <!-- TODO: this breaks if UAssetAPI-DNNE.CodeGen and UAssetAPI-DNNE target frameworks differ? -->
        <PropertyGroup>
            <CodeGenCmd>$(SolutionDir)UAssetAPI-DNNE.CodeGen/bin/$(Configuration)/$(TargetFramework)/$(RDIPart)$(CodeGenBin)</CodeGenCmd>
        </PropertyGroup>

        <Exec Command="$(CodeGenCmd) --input=&quot;$(ProjectDir)src/templates/EngineVersion.liquid&quot; --output=&quot;$(OutDir)engineversion.h&quot; --render-action=EngineVersion"/>
    </Target>

    <Target Name="CleanEngineVersionHeader" BeforeTargets="CoreClean">
        <Delete Files="$(OutDir)engineversion.h"/>
    </Target>

</Project>
